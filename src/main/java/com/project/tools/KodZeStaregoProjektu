package javaapplication9;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

public class NewJFrame extends javax.swing.JFrame {

    MyImage Photos;
    PhotoPanel photoPanel;
    MyBrush brush;
    Thread photoPanelThread;
    Boolean change,
            clicked = false;
    
    int mouseStartX,
            mouseStartY,
            mouseEndX,
            mouseEndY;
    
    int r_pasek = 127,
            g_pasek = 127,
            b_pasek = 127,
            jasnosc_pasek = 127,
            progres = 0;

    public class PhotoPanel extends JPanel implements Runnable, MouseListener {

        BufferedImage Photo;
        int x = 0,
                y = 0,
                orginalPhotoWidth,
                orginalPhotoHeight,
                paneWidth,
                paneHeight,
                newPhotoWidth,
                newPhotoHeight;

        public PhotoPanel(BufferedImage photo) {
            int x, y;
            Photo = photo;
            
            setPreferredSize(new Dimension(Photo.getWidth(), Photo.getHeight()));

            orginalPhotoWidth = Photo.getWidth();
            orginalPhotoHeight = Photo.getHeight();
            paneWidth = jScrollPane1.getWidth();
            paneHeight = jScrollPane1.getHeight();
            
            jLabel7.setEnabled(true);
            jLabel7.setText(Photo.getWidth() + "x" + Photo.getHeight() + "px.");
        }
        
        public Boolean checkSize() {
            if (newPhotoWidth < orginalPhotoWidth && newPhotoHeight < orginalPhotoHeight) {
                return true;
            } else {
                return false;
            }
        }
        
        @Override
        public void paint(Graphics g) {
            super.paintComponent(g);

            Graphics2D g2d = (Graphics2D) g;
          
            if (orginalPhotoWidth > paneWidth || orginalPhotoHeight > paneHeight) {
                if (orginalPhotoWidth / orginalPhotoHeight > paneWidth / paneHeight) {
                    newPhotoWidth = (int) (paneWidth * Photos.getZoom());
                    newPhotoHeight = (int) ((orginalPhotoHeight / (orginalPhotoWidth / newPhotoWidth)) * Photos.getZoom());
                } else {
                    newPhotoHeight = (int) (paneHeight * Photos.getZoom());
                    newPhotoWidth = (int) ((orginalPhotoWidth / (orginalPhotoHeight / newPhotoHeight)) * Photos.getZoom());
                }
            } else {
                newPhotoWidth = orginalPhotoWidth;
                newPhotoHeight = orginalPhotoHeight;
            }
            
            this.setSize(orginalPhotoWidth, orginalPhotoHeight);
            
            if(brush.isActive()){
                int [][] matrix = brush.getMatrix();
                
                for(int i = 0; i < 3; ++i){
                    for(int j = 0; j < 3; ++j){
                        
                        if(matrix[i][j] == 1){
                            JOptionPane.showMessageDialog(photoPanel, "StartX: " + (mouseStartX + i + x) + " StartY: " + (mouseStartY + i + y));
                        }
                    }
                }
            }

            Image scaledImage = Photo.getScaledInstance(newPhotoWidth, newPhotoHeight, 0);
            
            x = (paneWidth - newPhotoWidth) / 2;
            y = (paneHeight - newPhotoHeight) / 2;

            g2d.drawImage(scaledImage, this.getX() + x, this.getY() + y, this);
            
            if(newPhotoWidth > paneWidth){
                this.setSize(newPhotoWidth, jScrollPane1.getHeight());
            }
            
            if(newPhotoHeight > paneHeight){
                this.setSize(jScrollPane1.getWidth(), newPhotoHeight);
            }
            
            if(mouseStartX != mouseEndX && mouseStartY != mouseEndY){
                g2d.drawRect(mouseStartX + x, mouseStartY + y, mouseEndX - mouseStartX, mouseEndY - mouseStartY);
            }
        }

        @Override
        public void run() {
            while (true) {

                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                }

                if (change == true) {
                    this.repaint();
                    change = false;
                }
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            mouseStartX = e.getXOnScreen();
            mouseStartY = e.getYOnScreen();
        }

        @Override
        public void mousePressed(MouseEvent e) {
            mouseStartX = e.getXOnScreen();
            mouseStartY = e.getYOnScreen();
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            mouseEndX = e.getXOnScreen();
            mouseEndY = e.getYOnScreen();
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseExited(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
    
    public NewJFrame() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser2 = new javax.swing.JFileChooser();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton_W = new javax.swing.JRadioButton();
        jRadioButton_NW = new javax.swing.JRadioButton();
        jRadioButton_N = new javax.swing.JRadioButton();
        jRadioButton_NE = new javax.swing.JRadioButton();
        jRadioButton_E = new javax.swing.JRadioButton();
        jRadioButton_SE = new javax.swing.JRadioButton();
        jRadioButton_S = new javax.swing.JRadioButton();
        jRadioButton_SW = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jRadioButtonBlack = new javax.swing.JRadioButton();
        jRadioButtonWhite = new javax.swing.JRadioButton();
        jRadioButtonRed = new javax.swing.JRadioButton();
        jRadioButtonGreen = new javax.swing.JRadioButton();
        jRadioButtonBlue = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton10 = new javax.swing.JRadioButton();
        buttonGroupColours = new javax.swing.ButtonGroup();
        buttonGroupFigures = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();

        jFileChooser2.setApproveButtonText("Otwórz");

        jFileChooser1.setApproveButtonText("Zapisz");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Postawowe");
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Kierunkowe");
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Stopniowe");
        jRadioButton3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton3ItemStateChanged(evt);
            }
        });

        jLabel3.setText("Wybierz rodzaj rozmycia z listy poniżej, a następnie ustaw odpowiednie opcje.");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.setEnabled(false);

        jLabel1.setText("Stopień rozmycia:");
        jLabel1.setEnabled(false);

        buttonGroup2.add(jRadioButton_W);
        jRadioButton_W.setText("Zachód");
        jRadioButton_W.setEnabled(false);

        buttonGroup2.add(jRadioButton_NW);
        jRadioButton_NW.setText("Północny zachód");
        jRadioButton_NW.setEnabled(false);

        buttonGroup2.add(jRadioButton_N);
        jRadioButton_N.setText("Północ");
        jRadioButton_N.setEnabled(false);

        buttonGroup2.add(jRadioButton_NE);
        jRadioButton_NE.setText("Północny wschód");
        jRadioButton_NE.setEnabled(false);

        buttonGroup2.add(jRadioButton_E);
        jRadioButton_E.setText("Wschód");
        jRadioButton_E.setEnabled(false);

        buttonGroup2.add(jRadioButton_SE);
        jRadioButton_SE.setText("Południowy wschód");
        jRadioButton_SE.setEnabled(false);

        buttonGroup2.add(jRadioButton_S);
        jRadioButton_S.setText("Południe");
        jRadioButton_S.setEnabled(false);

        buttonGroup2.add(jRadioButton_SW);
        jRadioButton_SW.setText("Południowy zachód");
        jRadioButton_SW.setEnabled(false);

        jLabel4.setText("Kierunek rozmycia:");
        jLabel4.setEnabled(false);

        jSeparator2.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton_NW)
                                    .addComponent(jRadioButton_W)
                                    .addComponent(jRadioButton_SW))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton_S)
                                    .addComponent(jRadioButton_N))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton_SE)
                                    .addComponent(jRadioButton_NE)
                                    .addComponent(jRadioButton_E)))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jRadioButton_N, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jRadioButton_NW)
                        .addComponent(jRadioButton_NE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_W)
                    .addComponent(jRadioButton_E))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton_SW)
                    .addComponent(jRadioButton_SE)
                    .addComponent(jRadioButton_S))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel9.setText("Wybierz kolor pędzla:");

        buttonGroupColours.add(jRadioButtonBlack);
        jRadioButtonBlack.setText("Czarny");
        jRadioButtonBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Colours/black.png"))); // NOI18N

        buttonGroupColours.add(jRadioButtonWhite);
        jRadioButtonWhite.setText("Biały");
        jRadioButtonWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Colours/white.png"))); // NOI18N

        buttonGroupColours.add(jRadioButtonRed);
        jRadioButtonRed.setText("Czerwony");
        jRadioButtonRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Colours/red.png"))); // NOI18N

        buttonGroupColours.add(jRadioButtonGreen);
        jRadioButtonGreen.setText("Zielony");
        jRadioButtonGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Colours/green.png"))); // NOI18N

        buttonGroupColours.add(jRadioButtonBlue);
        jRadioButtonBlue.setText("Niebieski");
        jRadioButtonBlue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Colours/blue.png"))); // NOI18N

        jLabel10.setText("Wybierz kształt pędzla:");

        buttonGroupFigures.add(jRadioButton9);
        jRadioButton9.setText("Okrąg");
        jRadioButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figures/okrag.png"))); // NOI18N

        buttonGroupFigures.add(jRadioButton10);
        jRadioButton10.setText("Kwadrat");
        jRadioButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figures/kwadrat.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonBlue)
                    .addComponent(jRadioButtonGreen)
                    .addComponent(jRadioButtonRed)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jRadioButtonBlack)
                            .addComponent(jRadioButtonWhite))
                        .addGap(95, 95, 95)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton10)
                            .addComponent(jRadioButton9)
                            .addComponent(jLabel10))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonBlack)
                    .addComponent(jRadioButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonWhite)
                    .addComponent(jRadioButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonRed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonGreen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonBlue)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Program graficzny");
        setMaximumSize(null);
        setMinimumSize(null);

        jTextField1.setToolTipText("");
        jTextField1.setEnabled(false);

        jScrollPane1.setAutoscrolls(true);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Brak zdjęcia");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel2MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jLabel2);
        jLabel2.getAccessibleContext().setAccessibleDescription("");

        jProgressBar1.setDoubleBuffered(true);
        jProgressBar1.setStringPainted(true);

        jButton1.setText("-");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("+");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Kontrast");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Jasność");

        jButton4.setText("Gamma");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("Rozmiar:");

        jLabel7.setText("<Brak zdjęcia>");
        jLabel7.setEnabled(false);

        jLabel8.setText("100%");

        jMenu1.setText("Plik");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Otwórz");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Zapisz");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Wyczyść");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem23.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem23.setText("Drukuj");
        jMenu1.add(jMenuItem23);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem16.setText("Zamknij");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem16);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edycja");

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Wstecz");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Naprzód");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);
        jMenu2.add(jSeparator1);

        jMenu3.setText("Filtry");
        jMenu3.setEnabled(false);

        jMenu4.setText("Filtry rozmywające");

        jMenuItem6.setText("Szybkie rozmycie");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Rozmycie Gaussa");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuItem19.setText("Rozmycie");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem19);

        jMenu3.add(jMenu4);

        jMenu5.setText("Filtry wyostrzające");

        jMenuItem8.setText("Wyostrzenie stopnia 1.");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenu3.add(jMenu5);

        jMenu6.setText("Filtry Laplace'a");

        jMenuItem9.setText("Filtr stopnia 1.");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenu3.add(jMenu6);

        jMenu7.setText("Wykrywanie krawędzi");

        jMenuItem10.setText("Wykrywanie krawędzi stopnia 1.");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenu3.add(jMenu7);

        jMenu2.add(jMenu3);

        jMenu9.setText("Kolor");
        jMenu9.setEnabled(false);

        jMenuItem4.setText("Negatyw");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem4);

        jMenuItem5.setText("Sepia");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem5);

        jMenu10.setText("Filtry kolorystyczne");

        jMenuItem13.setText("Pomarańczowy");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem13);

        jMenuItem14.setText("Zimny (niebieski)");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem14);

        jMenuItem15.setText("Zimny (zielony)");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem15);

        jMenu9.add(jMenu10);

        jMenuItem20.setText("B/W");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem20);

        jMenu2.add(jMenu9);
        jMenu2.add(jSeparator3);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, 0));
        jMenuItem21.setText("Zbliż");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem21);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, 0));
        jMenuItem22.setText("Oddal");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem22);

        jMenuBar1.add(jMenu2);

        jMenu11.setText("Rysowanie");

        jRadioButtonMenuItem1.setText("Pędzel");
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenu11.add(jRadioButtonMenuItem1);

        jMenuBar1.add(jMenu11);

        jMenu8.setText("Pomoc");

        jMenuItem17.setText("Autor");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem17);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem18.setText("Pomoc");
        jMenu8.add(jMenuItem18);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addGap(577, 577, 577)
                        .addComponent(jLabel8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void activateProgresBar(int max) {
        jProgressBar1.setMaximum(max);
        jProgressBar1.setValue(0);
        progres = 0;
    }

    private int getColor(int choose, int x, int y, int[][] matrix) {
        int wx = 0, 
                w = 0;
        int[][] RGB = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};

        Color[] tmp = new Color[9];

        if (x > 0 && y > 0) {
            tmp[0] = new Color(Photos.getImage(Photos.getIndexOfSelectedImage()).getRGB(x - 1, y - 1));

            switch (choose) {
                case 1: RGB[0][0] = tmp[0].getRed(); break;
                case 2: RGB[0][0] = tmp[0].getGreen(); break;
                default: RGB[0][0] = tmp[0].getBlue(); break;
            }
        }
        if (y > 0) {
            tmp[1] = new Color(Photos.getSelectedImage().getRGB(x, y - 1));

            switch (choose) {
                case 1: RGB[0][1] = tmp[1].getRed(); break;
                case 2: RGB[0][1] = tmp[1].getGreen(); break;
                default: RGB[0][1] = tmp[1].getBlue(); break;
            }
        }
        if (x < Photos.getSelectedImage().getWidth() - 1 && y > 0) {
            tmp[2] = new Color(Photos.getSelectedImage().getRGB(x + 1, y - 1));

            switch (choose) {
                case 1: RGB[0][2] = tmp[2].getRed(); break;
                case 2: RGB[0][2] = tmp[2].getGreen(); break;
                default: RGB[0][2] = tmp[2].getBlue(); break;
            }
        }

        if (x > 0) {
            tmp[3] = new Color(Photos.getSelectedImage().getRGB(x - 1, y));

            switch (choose) {
                case 1: RGB[1][0] = tmp[3].getRed(); break;
                case 2: RGB[1][0] = tmp[3].getGreen(); break;
                default: RGB[1][0] = tmp[3].getBlue(); break;
            }
        }
        if (x >= 0 && y >= 0) {
            tmp[4] = new Color(Photos.getSelectedImage().getRGB(x, y));

            switch (choose) {
                case 1: RGB[1][1] = tmp[4].getRed(); break;
                case 2: RGB[1][1] = tmp[4].getGreen(); break;
                default: RGB[1][1] = tmp[4].getBlue(); break;
            }
        }
        if (x < Photos.getSelectedImage().getWidth() - 1) {
            tmp[5] = new Color(Photos.getSelectedImage().getRGB(x + 1, y));

            switch (choose) {
                case 1: RGB[1][2] = tmp[5].getRed(); break;
                case 2: RGB[1][2] = tmp[5].getGreen(); break;
                default: RGB[1][2] = tmp[5].getBlue(); break;
            }
        }

        if (x > 0 && y < Photos.getSelectedImage().getHeight() - 1) {
            tmp[6] = new Color(Photos.getSelectedImage().getRGB(x - 1, y + 1));

            switch (choose) {
                case 1: RGB[2][0] = tmp[6].getRed(); break;
                case 2: RGB[2][0] = tmp[6].getGreen(); break;
                default: RGB[2][0] = tmp[6].getBlue(); break;
            }
        }
        if (y < Photos.getSelectedImage().getHeight() - 1) {
            tmp[7] = new Color(Photos.getSelectedImage().getRGB(x, y + 1));

            switch (choose) {
                case 1: RGB[2][1] = tmp[7].getRed(); break;
                case 2: RGB[2][1] = tmp[7].getGreen(); break;
                default: RGB[2][1] = tmp[7].getBlue(); break;
            }
        }
        if (x < Photos.getSelectedImage().getWidth() - 1 && y < Photos.getSelectedImage().getHeight() - 1) {
            tmp[8] = new Color(Photos.getSelectedImage().getRGB(x + 1, y + 1));

            switch (choose) {
                case 1: RGB[2][2] = tmp[8].getRed(); break;
                case 2: RGB[2][2] = tmp[8].getGreen(); break;
                default: RGB[2][2] = tmp[8].getBlue(); break;
            }
        }
        
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (matrix[i][j] > 0) {
                    w += matrix[i][j];
                }
                wx += matrix[i][j] * RGB[i][j];
            }
        }

        change = true;

        if (w != 0) {
            return wx / w;
        } else {
            return Photos.getSelectedImage().getRGB(x, y);
        }
    }

    private void filter(int[][] matrix) {
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {

                int r = getColor(1, x, y, matrix);
                int g = getColor(2, x, y, matrix);
                int b = getColor(3, x, y, matrix);

                if (r < 0) {
                    r = 0;
                } else if (r > 255) {
                    r = 255;
                }
                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }
                if (b < 0) {
                    b = 0;
                } else if (b > 255) {
                    b = 255;
                }

                Color tmp1 = new Color(r, g, b);
                Photos.getSelectedImage().setRGB(x, y, tmp1.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
        //ImageIcon imgIcon = new ImageIcon(Photos.getSelectedImage());
        //jLabel2.setIcon(imgIcon);
        //photoPanel.paint(getGraphics());
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jFileChooser2.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));
        
        if (jFileChooser2.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            File plik = jFileChooser2.getSelectedFile();
            jTextField1.setText(plik.getAbsolutePath());

            try {
                Photos = new MyImage(ImageIO.read(plik));
                
                photoPanel = new PhotoPanel(Photos.getSelectedImage());
                jScrollPane1.setViewportView(photoPanel);

                photoPanelThread = new Thread(photoPanel);
                photoPanelThread.start();
                change = true;
                
                jMenu3.setEnabled(true);
                jMenu9.setEnabled(true);
                
                 int[][] matrix = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
                brush = new MyBrush(matrix, Color.red);
                
            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "Wystąpił błąd podczas wczytywania pliku.\n" + e.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE, null);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (!jTextField1.getText().isEmpty()) {

            jFileChooser2.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));

            int odpowiedz = jFileChooser1.showSaveDialog(this);

            if (odpowiedz == JFileChooser.APPROVE_OPTION) {
                
                File file = jFileChooser1.getSelectedFile();

                try {
                    ImageIO.write(Photos.getSelectedImage(), "JPEG", file);

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(rootPane, "Wystąpił błąd.\n" + e.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE, null);
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Plik nie może zostać zapisany.\nZanim zapiszesz plik najpierw musisz go otworzyć.", "Błąd", JOptionPane.WARNING_MESSAGE, null);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Photos.clearImageList();
        jTextField1.setText("");
        jLabel2.setIcon(null);
        change = true;
        jMenu3.setEnabled(false);
        jMenu9.setEnabled(false);
        jLabel7.setEnabled(false);          //Rozmiar zdjęcia obok linku do niego
        jLabel7.setText("Brak zdjecia");
        photoPanelThread.stop();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Photos.copyLastImage();
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                Photos.getSelectedImage().setRGB(x, y, 255 - Photos.getSelectedImage().getRGB(x, y));
            }
        }

        change = true;
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int[][] matrix = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        filter(matrix);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        int[][] matrix = {{2, 3, 2}, {3, 3, 3}, {2, 3, 2}};
        filter(matrix);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        int[][] matrix = {{-1, -1, -1}, {-1, 9, -1}, {-1, -1, -1}};
        filter(matrix);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        int[][] matrix = {{1, -2, 1}, {-2, 4, -2}, {1, -2, 1}};
        filter(matrix);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        int[][] matrix = {{0, 0, 0}, {-1, 2, -1}, {0, 0, 0}};
        filter(matrix);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed() + 10,
                        g = tmp.getGreen() + 10,
                        b = tmp.getBlue() + 10;

                if (r > 255) {
                    r = 255;
                }

                if (g > 255) {
                    g = 255;
                }

                if (b > 255) {
                    b = 255;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed() - 10,
                        g = tmp.getGreen() - 10,
                        b = tmp.getBlue() - 10;

                if (r < 0) {
                    r = 0;
                }

                if (g < 0) {
                    g = 0;
                }

                if (b < 0) {
                    b = 0;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        Photos.setPreviousImage();
        change = true;
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        Photos.setNextImage();
        change = true;
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        int kontrast = Integer.parseInt(jTextField2.getText());
        
        double tmp_double = 1.2725 * kontrast,
                tmp1_double = 255 / (255 - 2 * tmp_double),
                tmp2_double = (255 + 2 * tmp_double) / 255;

        Photos.copyLastImage();
        
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed(),
                        g = tmp.getGreen(),
                        b = tmp.getBlue();

                if (tmp_double > 0) {
                    if (r - tmp_double == 0) {
                        r = 0;
                    } else if (r > 255 - tmp_double) {
                        r = 255;
                    } else {
                        r = (int) (tmp1_double * (r - tmp_double));
                    }

                    if (g - tmp_double == 0) {
                        g = 0;
                    } else if (g > 255 - tmp_double) {
                        g = 255;
                    } else {
                        g = (int) (tmp1_double * (g - tmp_double));
                    }

                    if (b - tmp_double == 0) {
                        b = 0;
                    } else if (b > 255 - tmp_double) {
                        b = 255;
                    } else {
                        b = (int) (tmp1_double * (b - tmp_double));
                    }
                } else if (tmp_double < 0) {
                    r = (int) (-tmp_double + tmp2_double * r);
                    g = (int) (-tmp_double + tmp2_double * g);
                    b = (int) (-tmp_double + tmp2_double * b);
                }

                if (r < 0) {
                    r = 0;
                } else if (r > 255) {
                    r = 255;
                }

                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }

                if (b < 0) {
                    b = 0;
                } else if (b > 255) {
                    b = 255;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed() + 30,
                        g = tmp.getGreen() + 10,
                        b = tmp.getBlue() - 10;

                if (r < 0) {
                    r = 0;
                } else if (r > 255) {
                    r = 255;
                }

                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }

                if (b < 0) {
                    b = 0;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed() - 10,
                        g = tmp.getGreen() + 10,
                        b = tmp.getBlue() + 30;

                if (r < 0) {
                    r = 0;
                }

                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }

                if (b < 0) {
                    b = 0;
                } else if (b > 255) {
                    b = 255;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed() - 10,
                        g = tmp.getGreen() + 30,
                        b = tmp.getBlue() + 10;

                if (r < 0) {
                    r = 0;
                }

                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }

                if (b < 0) {
                    b = 0;
                } else if (b > 255) {
                    b = 255;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Robert Jaśkowiec (c) 2014 - Gliwice.\nAll rights reserved.\nrobert.jaskowiec[at]gmail.com", "Autor", JOptionPane.INFORMATION_MESSAGE, null);
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        //ZAMYKANIE PROGRAMU
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        jLabel1.setEnabled(false);
        jComboBox1.setEnabled(false);

        jLabel4.setEnabled(false);
        jRadioButton_N.setEnabled(false);
        jRadioButton_NE.setEnabled(false);
        jRadioButton_E.setEnabled(false);
        jRadioButton_SE.setEnabled(false);
        jRadioButton_S.setEnabled(false);
        jRadioButton_SW.setEnabled(false);
        jRadioButton_W.setEnabled(false);
        jRadioButton_NW.setEnabled(false);
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        jLabel1.setEnabled(false);
        jComboBox1.setEnabled(false);

        jLabel4.setEnabled(true);
        jRadioButton_N.setEnabled(true);
        jRadioButton_NE.setEnabled(true);
        jRadioButton_E.setEnabled(true);
        jRadioButton_SE.setEnabled(true);
        jRadioButton_S.setEnabled(true);
        jRadioButton_SW.setEnabled(true);
        jRadioButton_W.setEnabled(true);
        jRadioButton_NW.setEnabled(true);
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void jRadioButton3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton3ItemStateChanged
        jLabel1.setEnabled(true);
        jComboBox1.setEnabled(true);

        jLabel4.setEnabled(false);
        jRadioButton_N.setEnabled(false);
        jRadioButton_NE.setEnabled(false);
        jRadioButton_E.setEnabled(false);
        jRadioButton_SE.setEnabled(false);
        jRadioButton_S.setEnabled(false);
        jRadioButton_SW.setEnabled(false);
        jRadioButton_W.setEnabled(false);
        jRadioButton_NW.setEnabled(false);
    }//GEN-LAST:event_jRadioButton3ItemStateChanged

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        JOptionPane.showMessageDialog(rootPane, jPanel1, "Rozmycie", JOptionPane.PLAIN_MESSAGE, null);
        if (jRadioButton1.isSelected()) {
            int[][] matrix = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
            filter(matrix);
        } else if (jRadioButton2.isSelected()) {
            if (jRadioButton_N.isSelected()) {
                int[][] matrix = {{0, 4, 0}, {0, 1, 0}, {0, 0, 0}};
                filter(matrix);
            } else if (jRadioButton_NE.isSelected()) {
                int[][] matrix = {{0, 4, 4}, {0, 1, 4}, {0, 0, 0}};
                filter(matrix);
            } else if (jRadioButton_E.isSelected()) {
                int[][] matrix = {{0, 0, 0}, {0, 1, 4}, {0, 0, 0}};
                filter(matrix);
            } else if (jRadioButton_SE.isSelected()) {
                int[][] matrix = {{0, 0, 0}, {0, 1, 4}, {0, 4, 4}};
                filter(matrix);
            } else if (jRadioButton_S.isSelected()) {
                int[][] matrix = {{0, 0, 0}, {0, 1, 0}, {0, 4, 0}};
                filter(matrix);
            } else if (jRadioButton_SW.isSelected()) {
                int[][] matrix = {{0, 0, 0}, {4, 1, 0}, {4, 4, 0}};
                filter(matrix);
            } else if (jRadioButton_W.isSelected()) {
                int[][] matrix = {{0, 0, 0}, {4, 1, 0}, {0, 0, 0}};
                filter(matrix);
            } else if (jRadioButton_NW.isSelected()) {
                int[][] matrix = {{4, 4, 0}, {4, 1, 0}, {0, 0, 0}};
                filter(matrix);
            }
        } else if (jRadioButton3.isSelected()) {
            int stopien = jComboBox1.getItemCount();

            int[][] matrix = {{stopien, stopien, stopien}, {stopien, 1, stopien}, {stopien, stopien, stopien}};
            filter(matrix);
        }
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed(),
                        g = tmp.getGreen(),
                        b = tmp.getBlue();

                double gray = 0.299 * r + 0.587 * g + 0.114 * b;

                if (gray < 0) {
                    gray = 0;
                } else if (gray > 255) {
                    gray = 255;
                }

                r = g = b = (int) gray;

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        double gamma = Integer.parseInt(jTextField4.getText());

        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());

        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed(),
                        g = tmp.getGreen(),
                        b = tmp.getBlue();

                r = (int) (255 * Math.pow(r / 255.0, 1.0 / gamma));
                g = (int) (255 * Math.pow(g / 255.0, 1.0 / gamma));
                b = (int) (255 * Math.pow(b / 255.0, 1.0 / gamma));

                if (r < 0) {
                    r = 0;
                } else if (r > 255) {
                    r = 255;
                }

                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }

                if (b < 0) {
                    b = 0;
                } else if (b > 255) {
                    b = 255;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Photos.copyLastImage();
        activateProgresBar(Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth());
        for (int x = 0; x < Photos.getSelectedImage().getWidth(); ++x) {
            for (int y = 0; y < Photos.getSelectedImage().getHeight(); ++y) {
                int RGB = Photos.getSelectedImage().getRGB(x, y);

                Color tmp = new Color(RGB);

                int r = tmp.getRed(),
                        g = tmp.getGreen(),
                        b = tmp.getBlue();

                double gray = 0.299 * r + 0.587 * g + 0.114 * b;

                r = g = b = (int) gray;

                r += 30;
                g += 10;
                b -= 10;

                if (r < 0) {
                    r = 0;
                } else if (r > 255) {
                    r = 255;
                }

                if (g < 0) {
                    g = 0;
                } else if (g > 255) {
                    g = 255;
                }

                if (b < 0) {
                    b = 0;
                }

                Color tmp2 = new Color(r, g, b);

                Photos.getSelectedImage().setRGB(x, y, tmp2.getRGB());

                jProgressBar1.setValue(jProgressBar1.getValue() + 1);

                if (jProgressBar1.getValue() == (progres + 1) * ((Photos.getSelectedImage().getHeight() * Photos.getSelectedImage().getWidth()) / 100)) {
                    Rectangle progressRect = jProgressBar1.getBounds();
                    progressRect.x = 0;
                    progressRect.y = 0;
                    jProgressBar1.paintImmediately(progressRect);
                    progres++;

                    change = true;
                }
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        if (photoPanel.checkSize()) {
            Photos.setZoom((Photos.getZoom() + 0.01));
        }
        jLabel8.setText(Photos.getZoom() * 100 + "%");
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        if (Photos.getZoom() > 50) {
            Photos.setZoom((Photos.getZoom() - 0.01));
        }
        jLabel8.setText(Photos.getZoom() * 100 + "%");
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
       
    }//GEN-LAST:event_jLabel2MousePressed

    private void jLabel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseReleased
        
    }//GEN-LAST:event_jLabel2MouseReleased

    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        if(jRadioButtonMenuItem1.isSelected()){
            JOptionPane.showMessageDialog(rootPane, jPanel2, "Pędzel", JOptionPane.PLAIN_MESSAGE, null);
            
            Color tmp = new Color(0, 0, 0);
            int[][] matrix = new int[3][3];
            
            if(jRadioButtonBlack.isSelected()){
                tmp = Color.black;
            } else if(jRadioButtonWhite.isSelected()){
                tmp = Color.white;
            } else if(jRadioButtonRed.isSelected()){
                tmp = Color.red;
            } else if(jRadioButtonGreen.isSelected()){
                tmp = Color.green;
            } else if(jRadioButtonBlue.isSelected()){
                tmp = Color.blue;
            }
            
            if(jRadioButton9.isSelected()){
                matrix[0][0] = 1; matrix[0][1] = 1; matrix[0][2] = 1;
                matrix[1][0] = 1; matrix[1][1] = 1; matrix[1][2] = 1; 
                matrix[2][0] = 1; matrix[2][1] = 1; matrix[2][2] = 1;
            } else {
                matrix[0][0] = 0; matrix[0][1] = 1; matrix[0][2] = 0;
                matrix[1][0] = 1; matrix[1][1] = 1; matrix[1][2] = 1; 
                matrix[2][0] = 0; matrix[2][1] = 1; matrix[2][2] = 0;
            }
            
            brush.setActive(true);
            brush.setColor(tmp);
            brush.setMatrix(matrix);
        } else {
            brush.setActive(false);
        }
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroupColours;
    private javax.swing.ButtonGroup buttonGroupFigures;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JRadioButton jRadioButtonBlack;
    private javax.swing.JRadioButton jRadioButtonBlue;
    private javax.swing.JRadioButton jRadioButtonGreen;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButton jRadioButtonRed;
    private javax.swing.JRadioButton jRadioButtonWhite;
    private javax.swing.JRadioButton jRadioButton_E;
    private javax.swing.JRadioButton jRadioButton_N;
    private javax.swing.JRadioButton jRadioButton_NE;
    private javax.swing.JRadioButton jRadioButton_NW;
    private javax.swing.JRadioButton jRadioButton_S;
    private javax.swing.JRadioButton jRadioButton_SE;
    private javax.swing.JRadioButton jRadioButton_SW;
    private javax.swing.JRadioButton jRadioButton_W;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
